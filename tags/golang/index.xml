<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Kyk&#39;s Blog</title>
    <link>https://kyktommy.github.io/tags/golang/</link>
    <description>Recent content in golang on Kyk&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Jan 2021 22:24:28 +0800</lastBuildDate><atom:link href="https://kyktommy.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Aes Cbc Pkcs7</title>
      <link>https://kyktommy.github.io/posts/aes-cbc-pkcs7/</link>
      <pubDate>Wed, 20 Jan 2021 22:24:28 +0800</pubDate>
      
      <guid>https://kyktommy.github.io/posts/aes-cbc-pkcs7/</guid>
      <description>Logic:
 sha256 key and iv AES encryption CBC mode PKCS7 padding  Versions:
 golang version javascript version  golang version package main import ( &amp;#34;bytes&amp;#34; &amp;#34;crypto/aes&amp;#34; &amp;#34;crypto/cipher&amp;#34; &amp;#34;crypto/sha256&amp;#34; &amp;#34;fmt&amp;#34; ) func PKCS7Padding(ciphertext []byte, blockSize int) []byte { padding := blockSize - len(ciphertext)%blockSize padtext := bytes.Repeat([]byte{byte(padding)}, padding) return append(ciphertext, padtext...) } func PKCS7UnPadding(origData []byte) []byte { length := len(origData) unpadding := int(origData[length-1]) return origData[:(length - unpadding)] } func encrypt(data, key, iv []byte) []byte { block, err := aes.</description>
    </item>
    
  </channel>
</rss>
