<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Kyk&#39;s Blog</title>
    <link>https://kyktommy.github.io/tags/go/</link>
    <description>Recent content in go on Kyk&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Feb 2020 21:55:25 +0800</lastBuildDate>
    
	<atom:link href="https://kyktommy.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Defer And Recover</title>
      <link>https://kyktommy.github.io/posts/go-defer-and-recover/</link>
      <pubDate>Fri, 21 Feb 2020 21:55:25 +0800</pubDate>
      
      <guid>https://kyktommy.github.io/posts/go-defer-and-recover/</guid>
      <description>Go defer is LIFO. defer function will be executed even after panic. So put recover inside defer.
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;time&amp;quot; ) func main() { defer func() { fmt.Println(&amp;quot;main defer&amp;quot;) }() go func() { defer func() { if err := recover(); err != nil { fmt.Println(&amp;quot;recover&amp;quot;, err) } }() panic(&amp;quot;panic here&amp;quot;) }() time.Sleep(1 \* time.Second) fmt.Println(&amp;quot;end&amp;quot;) }  output:
recover panic here end main defer  </description>
    </item>
    
    <item>
      <title>Go Cap Problem</title>
      <link>https://kyktommy.github.io/posts/go-cap-problem/</link>
      <pubDate>Thu, 09 Jan 2020 23:59:01 +0800</pubDate>
      
      <guid>https://kyktommy.github.io/posts/go-cap-problem/</guid>
      <description>golang cap
 The capacity of a slice is the number of elements in the underlying array, counting from the first element in the slice.
 If we append item to a slice that over the capacity, it will return the new array. But if we append item to a slice within capacity, it will change the orginal one.
The following code shows underCap changes the input array.
func overCap(a []int) []int { fmt.</description>
    </item>
    
    <item>
      <title>Go Http Log</title>
      <link>https://kyktommy.github.io/posts/go-http-log/</link>
      <pubDate>Tue, 31 Dec 2019 19:21:43 +0800</pubDate>
      
      <guid>https://kyktommy.github.io/posts/go-http-log/</guid>
      <description>We need a logger for every routes, so made a simple http log middleware. Need to replace writer to custom one, and also take care of reading body.
package main import ( &amp;quot;bytes&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;io&amp;quot; &amp;quot;io/ioutil&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;strings&amp;quot; ) type bodyLogWriter struct { http.ResponseWriter body *bytes.Buffer } func (w bodyLogWriter) Write(b []byte) (int, error) { w.body.Write(b) return w.ResponseWriter.Write(b) } func main() { httpLog := func(next http.Handler) http.Handler { return http.HandlerFunc(func(w http.</description>
    </item>
    
    <item>
      <title>Find Go Project</title>
      <link>https://kyktommy.github.io/posts/find-go-project/</link>
      <pubDate>Sun, 22 Dec 2019 18:41:34 +0800</pubDate>
      
      <guid>https://kyktommy.github.io/posts/find-go-project/</guid>
      <description>I have so many go projects in go path. Since i didnt bookmarked all projects, so each time i need to go to $GOPATH and cd to that package name.
Here is my script for current solution. Assume your target project is in 3 depth of src.
function findgo() { find $GOPATH/src -mindepth 3 -maxdepth 3 -type d -exec ls -ld &amp;quot;{}&amp;quot; \; | grep $1 | awk &#39;{ print $9 }&#39; | nl }  âžœ ~ findgo proto 1	/Users/tommy/go-workspace/src/google.</description>
    </item>
    
  </channel>
</rss>