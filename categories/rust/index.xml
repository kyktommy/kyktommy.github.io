<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rust on Kyk&#39;s Blog</title>
    <link>http://localhost:1313/categories/rust/</link>
    <description>Recent content in Rust on Kyk&#39;s Blog</description>
    <generator>Hugo -- 0.128.2</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Dec 2019 23:35:06 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust Read Write File</title>
      <link>http://localhost:1313/posts/rust-read-write-file/</link>
      <pubDate>Thu, 19 Dec 2019 23:35:06 +0800</pubDate>
      <guid>http://localhost:1313/posts/rust-read-write-file/</guid>
      <description>use std::fs; fn main() { let data = &amp;#34;test data&amp;#34;; // write file let w = fs::write(&amp;#34;tmp.txt&amp;#34;, data); match w { Ok(()) =&amp;gt; println!(&amp;#34;write success&amp;#34;), Err(err) =&amp;gt; panic!(&amp;#34;write fail {:?}&amp;#34;, err), }; // read file let r = fs::read_to_string(&amp;#34;tmp.txt&amp;#34;); let r = match r { Ok(content) =&amp;gt; content, Err(err) =&amp;gt; panic!(&amp;#34;read fail {:?}&amp;#34;, err), }; println!(&amp;#34;{}&amp;#34;, r); } </description>
    </item>
    <item>
      <title>Rust Json</title>
      <link>http://localhost:1313/posts/rust-json/</link>
      <pubDate>Wed, 18 Dec 2019 23:29:48 +0800</pubDate>
      <guid>http://localhost:1313/posts/rust-json/</guid>
      <description>Rust serialize, deserialize json use serde.
cargo.toml
[dependencies] serde = &amp;#34;0.9&amp;#34; serde_json = &amp;#34;0.9&amp;#34; serde_derive = &amp;#34;0.9&amp;#34; main.rs
extern crate serde; extern crate serde_json; #[macro_use] extern crate serde_derive; #[derive(Serialize, Deserialize, Debug)] struct Response { code: u32, success: bool, payload: Payload, } #[derive(Serialize, Deserialize, Debug)] struct Payload { length: u32, items: Vec&amp;lt;String&amp;gt;, } fn main() { let data = r#&amp;#34; { &amp;#34;code&amp;#34;: 200, &amp;#34;success&amp;#34;: true, &amp;#34;payload&amp;#34;: { &amp;#34;length&amp;#34;: 123, &amp;#34;items&amp;#34;: [&amp;#34;apple&amp;#34;, &amp;#34;orange&amp;#34;] } } &amp;#34;#; // deserialize let resp: Response = serde_json::from_str(&amp;amp;data).</description>
    </item>
  </channel>
</rss>
