<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust on Kyk&#39;s Blog</title>
    <link>https://kyktommy.github.io/categories/rust/</link>
    <description>Recent content in rust on Kyk&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Dec 2019 23:35:06 +0800</lastBuildDate><atom:link href="https://kyktommy.github.io/categories/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust Read Write File</title>
      <link>https://kyktommy.github.io/posts/rust-read-write-file/</link>
      <pubDate>Thu, 19 Dec 2019 23:35:06 +0800</pubDate>
      
      <guid>https://kyktommy.github.io/posts/rust-read-write-file/</guid>
      <description>usestd::fs;fn main(){letdata=&amp;#34;test data&amp;#34;;// write file letw=fs::write(&amp;#34;tmp.txt&amp;#34;,data);matchw{Ok(())=&amp;gt;println!(&amp;#34;write success&amp;#34;),Err(err)=&amp;gt;panic!(&amp;#34;write fail {:?}&amp;#34;,err),};// read file letr=fs::read_to_string(&amp;#34;tmp.txt&amp;#34;);letr=matchr{Ok(content)=&amp;gt;content,Err(err)=&amp;gt;panic!(&amp;#34;read fail {:?</description>
    </item>
    
    <item>
      <title>Rust Json</title>
      <link>https://kyktommy.github.io/posts/rust-json/</link>
      <pubDate>Wed, 18 Dec 2019 23:29:48 +0800</pubDate>
      
      <guid>https://kyktommy.github.io/posts/rust-json/</guid>
      <description>Rust serialize, deserialize json use serde.
 cargo.toml
[dependencies] serde = &amp;quot;0.9&amp;quot; serde_json = &amp;quot;0.9&amp;quot; serde_derive = &amp;quot;0.9&amp;quot; main.rs
externcrateserde;externcrateserde_json;#[macro_use]externcrateserde_derive;#[derive(Serialize, Deserialize, Debug)]struct Response{code: u32,success: bool,payload: Payload,}#[derive(Serialize, Deserialize, Debug)]struct Payload{length: u32,items: Vec&amp;lt;String&amp;gt;,}fn main(){letdata=r#&amp;#34; { &amp;#34;code&amp;#34;: 200, &amp;#34;success&amp;#34;: true, &amp;#34;payload&amp;#34;: { &amp;#34;length&amp;#34;: 123, &amp;#34;items&amp;#34;: [&amp;#34;apple&amp;#34;, &amp;#34;orange&amp;#34;] } } &amp;#34;#;// deserialize letresp: Response=serde_json::from_str(&amp;amp;data).unwrap();println!(&amp;#34;resp: {:?}&amp;#34;,resp);// serialize letresp_json=serde_json::to_string(&amp;amp;resp).unwrap();println!(&amp;#34;json: {}&amp;#34;,resp_json);}output
resp: Response { code: 200, success: true, payload: Payload { length: 123, items: [&amp;quot;apple&amp;quot;, &amp;quot;orange&amp;quot;] } } json: {&amp;quot;code&amp;quot;:200,&amp;quot;success&amp;quot;:true,&amp;quot;payload&amp;quot;:{&amp;quot;length&amp;quot;:123,&amp;quot;items&amp;quot;:[&amp;quot;apple&amp;quot;,&amp;quot;orange&amp;quot;]}} </description>
    </item>
    
  </channel>
</rss>
