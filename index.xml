<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kyk&#39;s Blog</title>
    <link>https://kyktommy.github.io/</link>
    <description>Recent content on Kyk&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Jan 2020 23:59:01 +0800</lastBuildDate>
    
	<atom:link href="https://kyktommy.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Cap Problem</title>
      <link>https://kyktommy.github.io/posts/go-cap-problem/</link>
      <pubDate>Thu, 09 Jan 2020 23:59:01 +0800</pubDate>
      
      <guid>https://kyktommy.github.io/posts/go-cap-problem/</guid>
      <description>golang cap
 The capacity of a slice is the number of elements in the underlying array, counting from the first element in the slice.
 If we append item to a slice that over the capacity, it will return the new array. But if we append item to a slice within capacity, it will change the orginal one.
The following code shows underCap changes the input array.
func overCap(a []int) []int { fmt.</description>
    </item>
    
    <item>
      <title>Go Http Log</title>
      <link>https://kyktommy.github.io/posts/go-http-log/</link>
      <pubDate>Tue, 31 Dec 2019 19:21:43 +0800</pubDate>
      
      <guid>https://kyktommy.github.io/posts/go-http-log/</guid>
      <description>We need a logger for every routes, so made a simple http log middleware. Need to replace writer to custom one, and also take care of reading body.
package main import ( &amp;quot;bytes&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;io&amp;quot; &amp;quot;io/ioutil&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;strings&amp;quot; ) type bodyLogWriter struct { http.ResponseWriter body *bytes.Buffer } func (w bodyLogWriter) Write(b []byte) (int, error) { w.body.Write(b) return w.ResponseWriter.Write(b) } func main() { httpLog := func(next http.Handler) http.Handler { return http.HandlerFunc(func(w http.</description>
    </item>
    
    <item>
      <title>Find Go Project</title>
      <link>https://kyktommy.github.io/posts/find-go-project/</link>
      <pubDate>Sun, 22 Dec 2019 18:41:34 +0800</pubDate>
      
      <guid>https://kyktommy.github.io/posts/find-go-project/</guid>
      <description>I have so many go projects in go path. Since i didnt bookmarked all projects, so each time i need to go to $GOPATH and cd to that package name.
Here is my script for current solution. Assume your target project is in 3 depth of src.
function findgo() { find $GOPATH/src -mindepth 3 -maxdepth 3 -type d -exec ls -ld &amp;quot;{}&amp;quot; \; | grep $1 | awk &#39;{ print $9 }&#39; | nl }  âžœ ~ findgo proto 1	/Users/tommy/go-workspace/src/google.</description>
    </item>
    
    <item>
      <title>Rust Read Write File</title>
      <link>https://kyktommy.github.io/posts/rust-read-write-file/</link>
      <pubDate>Thu, 19 Dec 2019 23:35:06 +0800</pubDate>
      
      <guid>https://kyktommy.github.io/posts/rust-read-write-file/</guid>
      <description>use std::fs; fn main() { let data = &amp;quot;test data&amp;quot;; // write file let w = fs::write(&amp;quot;tmp.txt&amp;quot;, data); match w { Ok(()) =&amp;gt; println!(&amp;quot;write success&amp;quot;), Err(err) =&amp;gt; panic!(&amp;quot;write fail {:?}&amp;quot;, err), }; // read file let r = fs::read_to_string(&amp;quot;tmp.txt&amp;quot;); let r = match r { Ok(content) =&amp;gt; content, Err(err) =&amp;gt; panic!(&amp;quot;read fail {:?}&amp;quot;, err), }; println!(&amp;quot;{}&amp;quot;, r); }  </description>
    </item>
    
    <item>
      <title>Rust Json</title>
      <link>https://kyktommy.github.io/posts/rust-json/</link>
      <pubDate>Wed, 18 Dec 2019 23:29:48 +0800</pubDate>
      
      <guid>https://kyktommy.github.io/posts/rust-json/</guid>
      <description>Rust serialize, deserialize json use serde.
cargo.toml
[dependencies] serde = &amp;quot;0.9&amp;quot; serde_json = &amp;quot;0.9&amp;quot; serde_derive = &amp;quot;0.9&amp;quot;  main.rs
extern crate serde; extern crate serde_json; #[macro_use] extern crate serde_derive; #[derive(Serialize, Deserialize, Debug)] struct Response { code: u32, success: bool, payload: Payload, } #[derive(Serialize, Deserialize, Debug)] struct Payload { length: u32, items: Vec&amp;lt;String&amp;gt;, } fn main() { let data = r#&amp;quot; { &amp;quot;code&amp;quot;: 200, &amp;quot;success&amp;quot;: true, &amp;quot;payload&amp;quot;: { &amp;quot;length&amp;quot;: 123, &amp;quot;items&amp;quot;: [&amp;quot;apple&amp;quot;, &amp;quot;orange&amp;quot;] } } &amp;quot;#; // deserialize let resp: Response = serde_json::from_str(&amp;amp;data).</description>
    </item>
    
  </channel>
</rss>